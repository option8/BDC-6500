


BACKGROUND
I acquired the BDC-6500 Computer from an estate sale. It was built and owned by a man we'll call Bruce (BDC were his initials)
I originally went to the sale looking for Bruce's Apple II, but the Thunderclock batteries inside had leaked so badly, the II was beyond salvage. So I settled for the BDC and a Vectrex (now with its new owner, Burger Becky)
Upon opening the BDC, I could see it was a customized KIM-1 system. There were four boards attached to a passive backplane:
 - the CPU board (the KIM-1 itself)
 - a 16K memory expansion
 - an 8K "Visable" memory expansion
 - and a wire wrapped prototyping board with some interesting chips on it. 
 Many of these, I have yet to identify. Possibly a 6502 single board system in its own right. At the very least, it has some RAM and ROMs
 
 And this was written on the ROMS.

KVOS  

So I went about dumping those ROMs, at the same time researching what I could about Bruce and KVOS, and learning a great deal about the KIM-1

I built a simple ROM reader with a Teensy Arduino clone (my microcontroller of choice) and was able to, after some tweaks to the hardware, get a solid, consistent read off them

I opened the result in the new tool Omnivore, which, along with reading and building Atari JumpMan levels, is a decent 6502 disassembler.

I also learned what a disassembler is.

Omnivore has the unique ability to show a visible bitmap of the ROM alongside the hex and disassembly. With that, I was able to find patterns in the portions of the ROM that disassembled as gibberish. 

See if you can spot what I did.

That's letters. The alphabet. ASCII characters. 

 - Most exciting and visually interesting is the Character portion of the ROM.

"A" character bytes
  012 34567	
0 ... X...X
1 X.. X...X
2 .X. X...X
3 .XX XXXXX
4 X.. X...X

"A" bitmap
.XX X.	first 3 bits of byte +3, first 2 bits of byte +4
X.. .X	first 3 bits of byte +1, first 2 bits of byte +2
X...X	bits 3-7 of byte +4...
XXXXX		+3
X...X		+2
X...X		+1
X...X		+0


Then I looked to the code. I looked around for an interactive disassembler for 6502 that would let me label and comment on things on the fly. Omnivore works well in this regard, but it's still crashy and and (at first) had a habit of losing my work.

So I asked around and got recommendations for da65, a command-line disassembler that takes a sidecar "info" file for directives while disassembling.

And this is what the info file looks like.

It produces a listing that looks like this. Suitable for assembly with a variety of 6502 assemblers, complete with comments, labels

So, what have I found so far?

 - 6502 Reset vectors in the right places.

 - Plenty of routines for checking an input against a set of commands (if input == R, W, etc)
but no idea where that input is coming from. A TTY keyboard? connected through a VIA chip?

 - Routines for moving around on the VM screen, placing characters.
but no reference to the address of the characters in ROM that I could find. 

 - References to jump tables
 but nothing that populates them. Am I missing some ROMs? 
 

 - learned a great deal about 65xx hardware design, assembly language




QUESTIONS (oh, so many questions)

Is it Homebrew? (a Bruce original work?)
Is it Complete? (would it run as-is, if properly emulated?)
Are the ROMs clean (or are there chunks missing/dirty with age?)
What does KVOS stand for? (KIM Visible OS? Keyboard Video OS? Knights Vilifying Operatic Sparrows?)
Is a taco a sandwich?

Technical bits
How and where are the jump table addresses at $160x set up? do they lead to some of the unreachable subroutines like F43C?
Where do we actually load character bytes from, and where do they get written to the bitmap display?
What hardware do we need, if we were to try and emulate it (16K board, 8K Visable Memory, 6530?)
What was the intended input? TTY keyboard? Are the IO addresses consistent with that?







HARDWARE:

KIM-1 with RAM 0000 to 03FF
	6530-002 at 1740-177F/17C0-17FF/1C00-1FFF
	6530-003 at 1700-173F/1780-17BF/1800-1BFF

6522 at $1580

MTU 16K Memory at $2000-$5FFF
MTU Visable Memory 8k at $6000-7FFF

320 px per line = 40 bytes, 8 bit wide chars
200 lines = 20 x 10px tall chars. ???

*** 
400 bytes = 1 line of 8x10px characters

why is so much writing to 2000, and only looping if it gets to 8000?
some kind of buffer/scrollback?


	320x200px top left to lower right, 
	TEXT 40 COLUMNS of 8px wide text chars. 25 LINES 8px tall (40x25=1000, so $3E8 chars)
	PIXELS 40 bytes wide (320 bits wide * 200 bits high = 64000 bits, $FA00 bits)
	
	screen position horiz pixels == characters. 
	screen position vert pixels == characters/8 <-- look for LSR or ROR x 3, divides by 8
		character position byte == pixel position byte * 8 <-- look for ROL, ASL x3, multiply by 8


BDC custom ROM board with 
	6532 at $1600? 128 bytes RAM ($7F starting ???)
	
0	Data register A
1	Data Direction register A
2	Data register B
3	Data Direction register B
4	Read Timer/Disable Interrupt
5	R Interrupt flag register, W disable interrupt
6	W enable interrupt
7	W enable Interrupt

C	Read timer

14	Write timer
15	Write timer
16	Write timer
17	Write timer

1C	Write timer
1D	Write timer
1E	Write timer
1F	Write timer

L1612
L1670,x
	
	6530 ???

                                                                        ¦
  +-------------------------------------------------------------------->¦
  ¦       ¦        ¦        ¦        ¦        ¦         ¦         ¦     ¦
+---+ +------+ +------+ +------+ +------+ +-------+ +-------+ +------+  ¦
¦   ¦ ¦ 1024 ¦ ¦ 1024 ¦ ¦  64  ¦ ¦  64  ¦ ¦ I/O 8 ¦ ¦ I/O 8 ¦ ¦ 1024 ¦  ¦
¦   ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦       ¦ ¦       ¦ ¦      ¦  ¦ E
¦   ¦ ¦ BYTE ¦ ¦ BYTE ¦ ¦ BYTE ¦ ¦ BYTE ¦ ¦ TIMER ¦ ¦ TIMER ¦ ¦ BYTE ¦  ¦ X
¦   ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦       ¦ ¦       ¦ ¦      ¦  ¦ P
¦   ¦ ¦ ROM  ¦ ¦ ROM  ¦ ¦ RAM  ¦ ¦ RAM  ¦ ¦       ¦ ¦       ¦ ¦ RAM  ¦  ¦ P
¦ 6 ¦ +------¦ +------¦ +------¦ +------¦ +-------¦ +-------¦ +------¦  ¦ A
¦ 5 ¦ ¦ 1FFF ¦ ¦ 1BFF ¦ ¦ 17FF ¦ ¦ 17BF ¦ ¦ 177F  ¦ ¦ 173F  ¦ ¦ 03FF ¦  ¦ N
¦ 0 ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦       ¦ ¦       ¦ ¦      ¦  ¦ S
¦ 2 ¦ ¦  TO  ¦ ¦  TO  ¦ ¦  TO  ¦ ¦  TO  ¦ ¦  TO   ¦ ¦  TO   ¦ ¦  TO  ¦  ¦ I
¦   ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦      ¦ ¦       ¦ ¦       ¦ ¦      ¦  ¦ O
¦   ¦ ¦ 1C00 ¦ ¦ 1800 ¦ ¦ 17C0 ¦ ¦ 1780 ¦ ¦ 1740  ¦ ¦ 1700  ¦ ¦ 0000 ¦  ¦ N
¦   ¦ +------¦ +------¦ +------¦ +------¦ +-------¦ +-------¦ +------¦  ¦
¦   ¦ ¦ 6530 ¦ ¦ 6530 ¦ ¦ 6530 ¦ ¦ 6530 ¦ ¦ 6530  ¦ ¦ 6530  ¦ ¦  8x  ¦  ¦
¦   ¦ ¦ -002 ¦ ¦ -003 ¦ ¦ -002 ¦ ¦ -003 ¦ ¦ -002  ¦ ¦ -003  ¦ ¦ 6102 ¦  ¦
+---+ +------+ +------+ +------+ +------+ +-------+ +-------+ +------+  ¦
  ¦       ¦        ¦        ¦        ¦        ¦         ¦         ¦     ¦
  +-------------------------------------------------------------------->¦
                                                                        ¦

+------------------------------------------------------------------------+
| ADDRESS |      AREA      | LABEL |              FUNCTION               |
|         |                |       |                                     |
|  00EF   |                | PCL   | Program Counter - Low Order Byte    |
|  00F0   |                | PGH   | Program Counter - High Order Byte   |
|  00F1   |     Machine    | P     | Status Register                     |
|  00F2   |     Register   | SF    | Stack Pointer                       |
|         |     Storage    |       |                                     |
|  00F3   |     Buffer     | A     | Accumulator                         |
|  00F4   |                | Y     | Y-Index Register                    |
|  00F5   |                | X     | X-Index Register                    |
+---------+----------------+-------+-------------------------------------|
|  1700   |                | PAD   | 6530-003 A Data Register            |
|  1701   |   Application  | PADD  | 6530-003 A Data Direction Register  |
|  1702   |        I/O     | PBD   | 6530-003 B Data Register            |
|  1703   |                | PBDD  | 6530-003 B Data Direction Register  |
+---------+----------------+-------+-------------------------------------|
|  1704   |                |       | 6530-003 Interval Timer             |
|         | Interval Timer |       |   (See Section 1.6 of               |
|         |                |       |    Hardware Manual)                 |
|  170F   |                |       |                                     |
+---------+----------------+-------+-------------------------------------|
|  17F5   |                | SAL   | Starting Address - Low Order Byte   |
|  17F6   |   Audio Tape   | SAH   | Starting Address - High Order Byte  |
|  17F7   |   Load & Dump  | EAL   | Ending Address - Low Order Byte     |
|  17F8   |                | EAH   | Ending Address - High Order Byte    |
|  17F9   |                | ID    | File Identification Number          |
+---------+----------------+-------+-------------------------------------|
|  l7FA   |                | NMIL  | NMI Vector - Low Order Byte         |
|  l7FB   |                | NMIH  | NMI Vector - High Order Byte        |
|  l7FC   |   Interrupt    | RSTL  | RST Vector - Low Order Byte         |
|         |    Vectors     |       |                                     |
|  17FD   |                | RSTH  | RST Vector - High Order Byte        |
|  l7FE   |                | IRQL  | IRQ Vector - Low Order Byte         |
|  17FF   |                | IRQH  | IRQ Vector - High Order Byte        |
+---------+----------------+-------+-------------------------------------|
|  1800   |                | DUMPT | Start Address - Audio Tape Dump     |
|         |  Audio Tape    |       |                                     |
|  1873   |                | LOADT | Start Address - Audio Tape Load     |
+---------+----------------+-------+-------------------------------------|
|  1C00   | STOP Key + SST |       | Start Address for NMI using KIM     |
|         |                |       | "Save Machine" Routine (Load in     |
|         |                |       | 17FA & 17FB)                        |
+---------+----------------+-------+-------------------------------------|
|  17F7   |   Paper Tape   | EAL   | Ending Address - Low Order Byte     |
|  17F8   |    Dump (Q)    | EAH   | Ending Address - High Order Byte    |
+------------------------------------------------------------------------+


The IRQ vector is stored in locations 17FE and 17FF.
00EF = PCL
00F0 = PCH
00F1 = Status Register (P)
00F2 = Stack Pointer (SP)
00F3 = Accumulator (A)
00F4 = Y Index Register
00F5 = X Index Register






VIA INTERNAL REGISTERS

One VIA chip has 16 internal registers used to control its many features.
These registers occupy 16 consecutive addresses in RAM. The following table
gives the offsets of each VIA register. All registers are 8-bit:

Register        Designation     Function
offset no.

  0             ORA or IRB      Output or input register B
  1             ORA or IRA      Output or input register A
  2             DDRB            Data direction register B
  3             DDRA            Data direction register A
  4             T1C-L           T1 low-byte latch or T1 low-byte counter
  5             T1C-H           T1 high-byte counter
  6             T1L-L           T1 low-byte latch
  7             T1L-H           T1 high-byte latch
  8             T2C-L           T2 low-byte latch or T2 low-byte counter
  9             T2C-H           T2 high-byte counter
 10             SR              Shift Register
 11             ACR             Auxiliary Control Register
 12             PCR             Peripheral Control Register
 13             IFR             Interrupt Flag Register
 14             IER             Interrupt Enable Register
 15             ORA or IRA      Identical to offset 1 but no handshake

6522 Chip registers
        PORTB = $1580			Output or input register B	
        PORTA = $1581			Output or input register A
        DDRB  = $1582			Data direction register B	
        DDRA  = $1583			Data direction register A	
        T1CL  = $1584			T1 low-byte latch or T1 low-byte counter	
        T1CH  = $1585			T1 high-byte counter	
        T1LL  = $1586			T1 low-byte latch	
        T1LH  = $1587			T1 high-byte latch	
        T2LL  = $1588			T2 low-byte latch or T2 low-byte counter	
        T2CH  = $1589			T2 high-byte counter	
        SR    = $158A			Shift Register	
        ACR   = $158B			Auxiliary Control Register	
        PCR   = $158C			Peripheral Control Register	
        IFR   = $158D			Interrupt Flag Register			peripheral control register: 
        IER   = $158E			Interrupt Enable Register			bit 7 hi when interrupt available. 
        ORAX  = $158F			Identical to offset 1 but no handshake	
					



On RESET: 
RESET:  cld                    ; FC00 D8      
        ldx     #$FF           ; FC01 A2 FF   		FF into X
        txs                    ; FC03 9A      		FF into stack Pointer
        lda     #$00           ; FC04 A9 00   		00 into A
        sta     6530PADD       ; FC06 8D 01 17		6530 data direction. 00=read?
        lda     6530IO         ; FC09 AD 00 17		6530 data register - 1 byte from 6530
        bpl     LFC14          ; FC0C 10 06   		if no hi bit set, reset KIM?
        asl     a              ; FC0E 0A      
        sta     $0F            ; FC0F 85 0F   
LFC11:  jmp     RESET2         ; FC11 4C 9B FC


0F = mode? 
00 - store input to $2000
80 - 


LFC14:  asl     a              ; FC14 0A           shift the 6530 data left.
LFC15:  .byte   $10            ; FC15 10           ???
LFC16:  .byte   $03            ; FC16 03           ???

; DOES KIM RESET
KIMRESET:
        jmp     KIMRST         ; FC17 4C 22 1C     1C22 resets the KIM - in the 6530-002




this looks like it takes a startup command like X---efabcd

first three characters after X are ignored.

E F bytes stored in $04, $05
A B C D bytes stored in $00 $01 $02 $03

byte C ($02) subtracted from 0, stored back in $02
byte D ($03) subtracted from 0, stored back in $03

bytes loaded from IO, stored at address set in A,B. Loops until CxD bytes read.
when done, jumps to address in E,F.

"load the program with entry point EF, starting at AB, length CD"

FC1A	        cld                    ;  D8        
FC1B	        sei                    ;  78        
FC1C	        ldx     #$FF           ;  A2 FF     
FC1E	        txs                    ;  9A        
FC1F	        lda     #$00           ;  A9 00     
FC21	        sta     6522-DDRA      ;  8D 83 15  
FC24	        lda     6522-PCR       ;  AD 8C 15  
FC27	        and     #$F0           ;  29 F0     
FC29	        ora     $0E            ;  05 0E     
FC2B	        sta     6522-PCR       ;  8D 8C 15  
FC2E	LFC2E:  jsr     WAITFORIO      ;  20 7F FC  
FC31	        cmp     #$58           ;  C9 58     
FC33	        bne     LFC2E          ;  D0 F9     
FC35	        jsr     WAITFORIO      ;  20 7F FC  
FC38	        jsr     WAITFORIO      ;  20 7F FC  
FC3B	LFC3B:  jsr     WAITFORIO      ;  20 7F FC  
FC3E	        jsr     WAITFORIO      ;  20 7F FC  
FC41	        sta     L0004          ;  85 04     
FC43	        jsr     WAITFORIO      ;  20 7F FC  
FC46	        sta     $05            ;  85 05     
FC48	        jsr     WAITFORIO      ;  20 7F FC  
FC4B	        sta     $00            ;  85 00     
FC4D	        jsr     WAITFORIO      ;  20 7F FC  
FC50	        sta     $01            ;  85 01     
FC52	        jsr     WAITFORIO      ;  20 7F FC  
FC55	        sta     $02            ;  85 02     
FC57	        jsr     WAITFORIO      ;  20 7F FC  
FC5A	        sta     $03            ;  85 03     
FC5C	        ldx     #$00           ;  A2 00     
FC5E	        txa                    ;  8A        
FC5F	LFC5F:  sec                    ;  38        
FC60	        sbc     $02            ;  E5 02     
FC62	        sta     $02            ;  85 02     
FC64	        txa                    ;  8A        
FC65	        sbc     $03            ;  E5 03     
FC67	        sta     $03            ;  85 03     
FC69	LFC69:  jsr     WAITFORIO      ;  20 7F FC  
FC6C	        sta     ($00,x)        ;  81 00     
FC6E	        inc     $00            ;  E6 00     
FC70	        bne     LFC74          ;  D0 02     
FC72	        inc     $01            ;  E6 01     
FC74	LFC74:  inc     $02            ;  E6 02     
FC76	        bne     LFC69          ;  D0 F1     
FC78	        inc     $03            ;  E6 03     
FC7A	        bne     LFC69          ;  D0 ED     
FC7C	        jmp     (L0004)        ;  6C 04 00  

; ----------------------------------------------------------------------------
; LOOPS UNTIL INPUT ON 6522. INTERRUPT FLAG BIT 1 SET ON IO AT 6522 PORTA
WAITFORIO:

FC7F        lda     6522-IFR       ;  AD 8D 15  
FC82        and     #$02           ;  29 02     
FC84        beq     WAITFORIO      ;  F0 F9     
FC86        lda     6522-INPUTA    ;  AD 81 15  
FC89        pha                    ;  48        
FC8A        lda     6522-PCR       ;  AD 8C 15  
FC8D        and     #$F0           ;  29 F0     
FC8F        ora     #$0C           ;  09 0C     
FC91        sta     6522-PCR       ;  8D 8C 15  
FC94        ora     #$0E           ;  09 0E     
FC96        sta     6522-PCR       ;  8D 8C 15  
FC99        pla                    ;  68        
FC9A        rts                    ;  60        



ASCII character in A

LF6AC:  bit     L1640          ; F6AC 2C 40 16       check bit 6 of 1640       
        bvc     LF6B4          ; F6AF 50 03          if bit6 on, jump to (1608)       
        jmp     (JUMP 1608)		; F6B1 6C 08 16 

LF6B4:  stx     XTMP1          ; F6B4 8E 49 BF  	otherwise, stash X and Y
        sty     YTMP1          ; F6B7 8C 4A BF  
        and     #$7F           ; F6BA 29 7F     	clear high bit from Accumulator
        sec                    ; F6BC 38        	
        sbc     #$20           ; F6BD E9 20     	subtract $20 
        bcc     CR             ; F6BF 90 93     	<32 is a control char, do a CR
        sta     L00F7          ; F6C1 85 F7     	stash result in F7
        jsr     LF8EB          ; F6C3 20 EB F8  	something with cursor position?
        lda     L00F7          ; F6C6 A5 F7     	get result back.
        sta     SRC-LO         ; F6C8 85 F1     	store ASCII-32 in $F1
        ldy     #$F0           ; F6CA A0 F0     	Y=F0
        asl     a              ; F6CC 0A        	ASCII-32 * 4
        asl     a              ; F6CD 0A        
        bcc     LF6D2          ; F6CE 90 02     	if < 64 skip
        iny                    ; F6D0 C8        	else, Y=F1
        clc                    ; F6D1 18        
LF6D2:  adc     SRC-LO         ; F6D2 65 F1     	ASCII-32*5
        sta     SRC-LO         ; F6D4 85 F1     	store in F1
        bcc     LF6D9          ; F6D6 90 01     	if > ?
        iny                    ; F6D8 C8        	else y=F1
LF6D9:  sty     SRC-HI         ; F6D9 84 F2     	Y into $F2
        ldy     #$00           ; F6DB A0 00     	Y=0
        sty     L00FA          ; F6DD 84 FA     	$FA=0 - loop counter?
        lda     (SRC-LO),y     ; F6DF B1 F1     	(character first byte) into ACC
        sta     L00F4          ; F6E1 85 F4     	(character first byte) into F4
        bmi     DISPLAYCHAR    ; F6E3 30 0C     	high bit set - has descender - DISPLAYCHAR
        sty     L00F5          ; F6E5 84 F5     	Y=0
        sty     L00F6          ; F6E7 84 F6     	Y=0
        jsr     MASKCHAR1      ; F6E9 20 15 F7  	move baseline up 2px
        jsr     MASKCHAR1      ; F6EC 20 15 F7  	
        sty     L00FA          ; F6EF 84 FA     	Y=0, $FA=0
DISPLAYCHAR
        jsr     CHARTOBITMAP   ; F6F1 20 49 F7 		
        jsr     MASKCHAR1      ; F6F4 20 15 F7 		baseline up 1px, X=3 or x=0, F5=masked/shifted byte FA+1
        lda     L00FA          ; F6F7 A5 FA    		FA loop done 8 times?
        cmp     #$07           ; F6F9 C9 07    		
        bmi     DISPLAYCHAR    ; F6FB 30 F4    		
        bit     L00F4          ; F6FD 24 F4    		(character first byte)
        bpl     LF70B          ; F6FF 10 0A    		if no descender
        sty     L00F5          ; F701 84 F5    		Y=0
        sty     L00F6          ; F703 84 F6    		F5,F6=0
        jsr     MASKCHAR1      ; F705 20 15 F7 		move baseline up 2px
        jsr     MASKCHAR1      ; F708 20 15 F7 		
LF70B:  jsr     DO TAB         ; F70B 20 2F F6 		
        ldy     YTMP1          ; F70E AC 4A BF 		retrieve X and Y
        ldx     XTMP1          ; F711 AE 49 BF 		
        rts                    ; F714 60       		return 

MASKCHAR1:
        ldy     #$00           ; F715 A0 00          Y=0
        ldx     L00FD          ; F717 A6 FD          X=? (loop counter 0-7)
        lda     MASK1,x        ; F719 BD 39 F7       0=00000011
        and     (SCRNLO),y     ; F71C 31 FB          clear non-masked bits
        ora     L00F5          ; F71E 05 F5          add bits from F6E5/F701 = 0?
        sta     (SCRNLO),y     ; F720 91 FB          store on screen,0?
        lda     MASK2,x        ; F722 BD 41 F7       0=11111111
        iny                    ; F725 C8             Y=1
        and     (SCRNLO),y     ; F726 31 FB          clear non-masked bits
        ora     L00F6          ; F728 05 F6          add bits from F6E5/F701 = 0?
        sta     (SCRNLO),y     ; F72A 91 FB          store on screen,1?
        lda     SCRNLO         ; F72C A5 FB          screen address up 1 px line
        sec                    ; F72E 38             
        sbc     #$28           ; F72F E9 28          
        sta     SCRNLO         ; F731 85 FB          
        bcs     LF737          ; F733 B0 02          
        dec     SCRNHI         ; F735 C6 FC          
LF737:  dey                    ; F737 88             Y=0
        rts                    ; F738 60             returns with Y=0, A=SCRNLO-40, X=$FD

CHARTOBITMAP:					A=char byte
        ldx     #$00           X = 0
        stx     L00F6          clear display byte
        ldy     L00FA          loop counter 0 to 7
        cpy     #$05           compare to 5
        bpl     LF775          Y >= 5 --> F775 (already did 5 bytes) 
        lda     (SRC-LO),y     byte 0-4 of char
        and     #$1F           ...xxxxx = gets last 5 bits	 A=last 5 bits of char byte 			
LF757:  ldx     L00FD          $Fd = 0 to 8
        cpx     #$03           compare with 3
        beq     LF768          if FD == 3 -> $F768
        bmi     LF76D          < 3 --> f76d - FD 0,1,2
        dex                    FD > 3, then x - 3
        dex                    
        dex                    X=1-5?
LF762:  lsr     a              lo bit into carry from last 5 bits of char byte 
        ror     L00F6          carry into high bit F6 display byte
        dex                    x - 1
        bne     LF762          LOOP until x = 0 (5 times?)	
LF768:  sta     L00F5          $F5 = masked/shifted byte?
        inc     L00FA          Ycounter + 1
        rts                    return with X=3 or x=0 -> F6F4

								jump here if FD=0,1,2								
LF76D:  asl     a              ;  shift A left
        cpx     #$02           ;  i assume we need to do this 2x or 3x
        beq     LF768          ;  A shifted 3x, X=2
        inx                    ;  otherwise increment X
        bne     LF76D          ;  loop if x!=2 

; did 5 bytes. or 6?
LF775:  lda     #$01           ;	A = 1 <-- byte 2 of bitmap
        cpy     #$05           ;	compare Y to 5  
        beq     LF77D          ;	if Y == 5 skip over  
        lda     #$03           ;	set A = 3  <-- byte 1 of bitmap

LF77D:  tay                    ;	Y = (1 or 3)  										$F7
        lda     ($F1),y        ;	load byte from ($F2 $F1) + 1 / + 3		X..X...X  
        lsr     a              ;											.X..X... 
        lsr     a              ;											..X..X..  
        lsr     a              ;	move three bits right					...X..X.	  
        and     #$1C           ;	keep only ...XXX.. bits					---X..--  
        sta     $F7            ;	store at F7											...X....  	
        iny                    ;	Y = (2 or 4)   
        lda     ($F1),y        ;	load byte from ($F2 $F1) + 2 / + 4		.X.X...X  
        rol     a              ;		rotate left three times				X.X...X. 
        rol     a              ;		first two bits are					.X...X..
        rol     a              ;		 in last 2 positions now			X...X..X
        and     #$03           ;	keep only ......XX bits					------.X
        ora     $F7            ;	put those into $F7									...X...X   
        jmp     LF757          ; 	loop on X=FD






Set screen memory location?

1634 -> SCRNLO FB
1635 -> SCRNHI FC

F5D2
adds 400 to screen address, puts in f1,f2 
400 = 10x40x1byte chars = 1 text line

add $90 to SCRNLO -> F1		lo addr + 144		00	90
add $01 to SCRNHI -> F2		hi addr + 1			60	61		

40 bytes= $28 = 1 line of pixels.


f1=source


6530-002 ROM 
$FE=CHAR

983  1E9E  A9 20     OUTSP   LDA   #$20
 984  1EA0  85 FE     OUTCH   STA   CHAR
 985  1EA2  86 FD             STX   TMPX
 986  1EA4  20 D4 1E          JSR   DELAY     10/11 BIT CODE SYNC
 987  1EA7  AD 42 17          LDA   SBD       START BIT
 988  1EAA  29 FE             AND   #$FE
 989  1EAC  8D 42 17          STA   SBD
 990  1EAF  20 D4 1E          JSR   DELAY
 991  1EB2  A2 08             LDX   #$08 
 992  1EB4  AD 42 17  OUT1    LDA   SBD       DATA BIT
 993  1EB7  29 FE             AND   #$FE 
 994  1EB9  46 FE             LSR   CHAR




to display character bitmap:
character (ASCII?) = A
character length = 5
character start address = 5 * A <-- look for "multiply by five" routine (A + 4A) ADC followed by two ASLs
95 chars in rom (475 bytes long) <-- look for #$5E, #$5F

VM is 320x200px <-- look for coordinates to bytes routines
320=40 bytes<-- look for multiply/divide by 40, (A + 4A) * 8A. multiplication by 2 = ASL, division = LSR 
40 columns of text <-- look for add/subtract 40 move up/down column

here we go:

UPSCRN: lda     SCRNLO        load the low bit of screen character/byte location
        sec                   set carry
        sbc     #$28          subtract 40 from screen location
        sta     SCRNLO        store new location 
        bcs     LF87A         if carry set, return
        dec     SCRNHI        else, passed zero, decrement high byte
LF87A:  rts                   return

; ----------------------------
DNSCRN: lda     SCRNLO        load the low bit of screen character/byte location
        clc                   clear carry
        adc     #$28          add 40 to screen location
        sta     SCRNLO        store new screen location
        bcc     LF886         if carry clear, return
        inc     SCRNHI        else, passed $FF, increment high byte
LF886:  rts                   return

not sure if it's strictly moving up and down by 1 character (i.e. 8px) or by 1 pixel.




VM board addresses top left to lower right. 
character bitmap main body is flipped <-- look for decrementing loop x 8

LF90A:  lda     $1630          ; e.g. A = 8
        sta     $FB            ; $FB = 8
        lda     $1631          ; e.g. A = 0x10
        sta     $FC            ; $FC = $10
        lda     $EE            ; e.g. A = 32
        ror     a              ; A = 16, Carry Clear
        lda     $ED            ; e.g. A = $AA 10101010
LF919:  pha                    ; stack = [$AA]
        and     #$07           ; clear all but last 3 bits A = 2 00000010
        sta     $FD            ; FD = 2
        pla                    ; A = $AA, clear stack
        ror     a              ; A = $55, 01010101, div/2
        lsr     a              ; A = $2A, 00101010  div/4
        lsr     a              ; A = $15, 00010101  div/8
        clc                    ; clear carry
        adc     $FB            ; adds $15 to original value at $1630, e.g A = $1D 00011101
        sta     $FB            ; stores result in $FB = $1D
        lda     $FC            ; loads original $1631 val. e.g. A = $10
        adc     #$A0           ; adds $A0 10100000. A = $B0 10110000
        sta     $FC            ; FC = $B0 10110000
        rts                    ; 
        							$1630 = 	$8 	00001000
        							$1631 = 	$10 00010000
        							$FB = 		$1D 00011101
                					$FC = 		$B0 10110000

        lda     #$B3           ; F535 A9 B3                                     ..
LF537:  sta     $162C          ; F537 8D 2C 16                                  .,.
        ldx     #$C7           ; F53A A2 C7                                     ..
        stx     $162B          ; F53C 8E 2B 16                                  .+.
        jsr     LF92E          ; F53F 20 2E F9                                   ..

A = #$B3 returns: A = #$20, FC = #$03, FB = #$20
A = #$C7 returns:
	
LF92E:  sta     $FB            ; $FB = #$B3 (179)
        lda     #$00           ; A = 0
        sta     $FC            ; $FC = 0
        lda     $162B          ; A = #$C7 (199) ($162B set at $F53C)
        sec                    ; set carry
        sbc     $FB            ; subtract #$B3 from #$C7 (199 - 179 = 20 Carry Cleared)
        bcc     LF8FA          ; if #$C7 < 180 jumps to location stored at 160C -> ???
        sta     $FB            ; else store the difference back at $FB = #$14 (20)
        asl     a              ; multiply by 2 #$28 (40)
        rol     $FC            ; 0
        asl     a              ; multiply by 2 #$50 (80)
        rol     $FC            ; 0
        adc     $FB            ; add to $FB. A = #$64 (100) <-- just multiplied by 5.
        bcc     LF94A          ; < FF, no carry, skips to F94A
        inc     $FC            ; 	skipped, would set FC = 1
LF94A:  asl     a              ; multiply by 2 =#$C8 (200)
        rol     $FC            ; 0
        asl     a              ; multiply by 2 =#$90 (400) carry set
        rol     $FC            ; $FC = 1 carry clear
        asl     a              ; multiply by 2 =#$20 (400) carry set <-- just multiplied by 40.
        rol     $FC            ; $FC = #$03 carry clear
        sta     $FB            ; $FB = #$20
        rts                    ; 






$1600 - $1613 jump table


$F1E2 (T1)
JSR to $F3A8 (check data table 2 location has been set)
if zero (location unset)
	$F1F8
	load A with 0
	store A at data table 1 (BF51)
	JSR to $F39D
		$F39D
		
$F3A8 (Check data table initialized)
loads A with location of data table 2 (uninitialized, is it 0?)
if 0, $F3B7, RTS <- first pass

!0 falls through, if carry set (from an SEC or IN* or ADC) $F3B3

carry clear falls through
compare A with value at $161E (???)
CLC, RTS

$F3B3
compare A with value at $161E (???)
SEC, RTS

first pass returns with A set to 0 (or data table initial value)
subsequent passes leave carry as-is, compares data table val with val at $161e (???)



$F2E1 (T2)
puts #5D #BF into $E7 $E8
lookup/data table 2 location is now $BF5D
NO REFERENCES?


   
#L0004           := $0004
#L00E9           := $00E9
#L0810           := $0810

#L4CFD           := $4CFD
        
       
       
       
$F1 lo byte of character ROM
$F2 hi byte of character ROM
$F3
$F4
$F5        
        
#	CHKHI   =     $F6
#	CHKSUM  =     $F7
#	INL     =     $F8       INPUT BUFFER
#	INH     =     $F9       INPUT BUFFER
#	POINTL  =     $FA       LSB OF OPEN CELL
#	POINTH  =     $FB       MSB OF OPEN CELL
#	TEMP    =     $FC
#	TMPX    =     $FD
#	CHAR    =     $FE
#	MODE    =     $FF
(where did this come from?)




LF6D9:  sty     $F2            ; 
        ldy     #$00           ; y = 0
        sty     $FA            ; $FA = 0
        lda     ($F1),y        ; $F1 = first byte of character
        sta     $F4            ; $F4 = first byte to display
        bmi     LF6F1          ; if bit 7 = 1
        sty     $F5            ; $F5 = 0
        sty     $F6            ; $F6 = 0
        jsr     LF715          ; screen position down 1 row, ???
        jsr     LF715          ; screen position down 1 row, ???
        sty     $FA            ; $FA = 0

LF6F1:  jsr     ?F749          ;
        jsr     LF715          ;
        lda     $FA            ;
        cmp     #$07           ;
        bmi     LF6F1          ;
        bit     $F4            ;
        bpl     LF70B          ;
        sty     $F5            ;
        sty     $F6            ;
        jsr     LF715          ;
        jsr     LF715          ;
LF70B:  jsr     LF62F          ;
        ldy     $BF4A          ;
        ldx     $BF49          ;
        rts                    ;

$FB = byte position on screen
$FC = 
$FD = 0 ???

MASK1
0 ......XX
1 X......X
2 XX......
3 XXX.....
4 XXXX....
5 XXXXX...
6 XXXXXX..
7 XXXXXXX.
8 XXXXXXXX
9 XXXXXXXX
a XXXXXXXX
b .XXXXXXX
c ..XXXXXX
d ...XXXXX
e ....XXXX
f .....XXX


LF715:  ldy     #$00           ; y = 0
        ldx     $FD            ; x = 0?
        lda     MASK1,x        ; A = ......XX
        and     (SCRNLO),y     ; gets last 2 bits of byte at current screen position
        ora     $F5            ; adds last 2 bits of $F5 to A
        sta     (SCRNLO),y     ; store byte at current screen position
        lda     MASK1+$08,x    ; A = XXXXXXXX
        iny                    ; y = 1
        and     (SCRNLO),y     ; get bits of next screen byte
        ora     $F6            ; add bits of $F6 to A
        sta     (SCRNLO),y     ; store byte at next screen position
        
        lda     SCRNLO         ; load current screen position into A
        sec                    ; set carry
        sbc     #$28           ; subtract 40, go UP a line
        sta     SCRNLO         ; update screen position pointer
        bcs     LF737          ; 
        dec     SCRNHI         ; adjust high byte if necessary
LF737:  dey                    ; y = 0 again
        rts                    ; return


$FA = #$00 - 07
$FD = ?
																			"A"			$F6
LF749:  ldx		#$00           X = 0
        stx     $F6            reset byte for display									........
        ldy     $FA            $Fa = 0 to 7
        cpy     #$05           compare to 5
        bpl     LF775          Y > 5 --> F775 (already did 5 bytes) 
        lda     ($F1),y        ($F1) = start byte of char, y = byte of char	...X...X	........
        and     #$1F           ...xxxxx = gets last 5 bits					...X...X	........

LF757:  ldx     $FD            $Fd = Xcounter? start at ?
        cpx     #$03           compare with 3
        beq     LF768          if == 3 -> $F768
        bmi     LF76D          < 3 --> f76d
        dex                    > 3, then x - 1
        dex                    x - 1
        dex                    x - 1

LF762:  lsr     a              bits into carry. LOOP					X	....X...
        ror     $F6            carry into $F6 = display byte							.......X
        dex                    x - 1
        bne     LF762          LOOP until x = 0 (5 times?)					........	...X...X	

LF768:  sta     $F5            $F5 = masked byte	...X...X 
        inc     $FA            Ycounter + 1
        rts                    

; -----------------------------
LF76D:  asl     a              ;  shift A left
        cpx     #$02           ;  i assume we need to do this twice
        beq     LF768          ;  if it's been done twice, go to f768
        inx                    ;  otherwise increment X
        bne     LF76D          ;  loop if !0 

LF775:  lda     #$01           ;	A = 1 <-- byte 2 of bitmap
        cpy     #$05           ;	compare Y to 5  
        beq     LF77D          ;	if Y == 5 skip over  
        lda     #$03           ;	set A = 3  <-- byte 1 of bitmap

LF77D:  tay                    ;	Y = (1 or 3)  										$F7
        lda     ($F1),y        ;	load byte from ($F2 $F1) + 1 / + 3		X..X...X  
        lsr     a              ;											.X..X... 
        lsr     a              ;											..X..X..  
        lsr     a              ;	move three bits right					...X..X.	  
        and     #$1C           ;	keep only ...XXX.. bits					---X..--  
        sta     $F7            ;	store at F7											...X....  	
        iny                    ;	Y = (2 or 4)   
        lda     ($F1),y        ;	load byte from ($F2 $F1) + 2 / + 4		.X.X...X  
        rol     a              ;		rotate left three times				X.X...X. 
        rol     a              ;		first two bits are					.X...X..
        rol     a              ;		 in last 2 positions now			X...X..X
        and     #$03           ;	keep only ......XX bits					------.X
        ora     $F7            ;	put those into $F7									...X...X   
        jmp     LF757          ; 
  

($F2 $F1) = pointer to CHARACTER START BYTE


"A" character bytes
  012 34567	
0 ... X...X
1 X.. X...X
2 .X. X...X
3 .XX XXXXX
4 X.. X...X

"A" bitmap
.XX X.	first 3 bits of byte +3, first 2 bits of byte +4
X.. .X	first 3 bits of byte +1, first 2 bits of byte +2
X...X	bits 3-7 of byte +4...
XXXXX		+3
X...X		+2
X...X		+1
X...X		+0




LF40D:  lda     #$40           ; F40D A9 40                                     .@
LF40F:  sta     $FA            ; F40F 85 FA                                     ..
...
        jsr     LF88A          ; F414 20 8A F8                                   ..





swaps $EB-$EC with $F3-$F4
LF84D:  ldx     #$01           ; X = 1
LF84F:  lda     $EB,x          ; A = $EC; A = $EB
        ldy     $F3,x          ; Y = $F4; Y = $F3
        sta     $F3,x          ; put A in $F4, put A in $F3
        sty     $EB,x          ; put Y in $EC, put Y in $EB
        dex                    ; X = 0
        bpl     LF84F          ; do it again with X = 0
        rts                    ; 



LF85B:  ldy     $FD            ; LOAD Y FROM $FD
        iny                    ; INCREMENT Y
        cpy     #$08           ; COMPARE TO 8
        sty     $FD            ; STORE Y+1 AT $FD AGAIN
        bmi     RTS4           ; BRANCH TO RETURN IF Y<8
        ldy     #$00           ; LOAD Y WITH 0
        sty     $FD            ; STORE AT $FD
        inc     SCRNLO         ; INCREMENT SCREEN POSITION
        bne     RTS4           ; IF NECESSARY
        inc     SCRNHI         ; INCREMENT SCREEN POSITION HI BYTE
RTS4:   rts                    ; RETURN WITH Y=0-8


LF887:  jsr     LF85B          ; RETURN WITH Y=0-8, $FD 0-8
LF88A:  ldy     $FD            ; Y = $FD  ($FA=#$40 LF40D)
        lda     MASK3,y        ; X.......
        ldy     #$00           ; Y=0
        bit     $FA            ; BIT 6 OF $FA TO OVERFLOW
        bvc     INVERT         ; IF BIT 6=0, INVERT ACCUMULATOR BYTE (MASK) (TRUE: $FA=#$40 LF40D)
        ora     (SCRNLO),y     ; IF NOT, OR WITH ACCUMULATOR BYTE (MASK) ADDS MASK BITS TO SCREEN BYTE Xxxxxxxxx
        sta     (SCRNLO),y     ; STORE AT SCREEN BYTE
        clc                    ; CLEAR CARRY
        rts                    ; RETURN

; -------------------------------
INVERT: eor     #$FF           ; X....... EXCLUSIVE OR WITH XXXXXXXX = .XXXXXXX
        and     (SCRNLO),y     ; AND WITH SCREEN BYTE, RETURNS ONLY MASKED BITS .xxxxxxx
        sta     (SCRNLO),y     ; STORE AT SCREEN BYTE
        rts                    ; RETURN

; ----------------------------------------------------------------------------




; BIT MASK TABLE
MASK3:  .byte   $80,$40,$20,$10,$08,$04,$02,$01; F8A2 80 40 20 10 08 04 02 01
X.......
.X......
..X.....
...X....
....X...
.....X..
......X.
.......X





is $1639 shift key, control key? seems to modify behavior of ASCII characters (tab, backspace, etc)

320px x 200px
?40char? x 25lines

$EB = text horiz coord?

carriage return:
CR:     lda     #$00           ; F65A A9 00                                     ..
        bit     $1639          ; F65C 2C 39 16                                  ,9.
        bmi     LF664          ; F65F 30 03                                     0.
        sta     $EB            ; F661 85 EB                                     ..
        rts                    ; F663 60                                        `

; ----------------------------------------------------------------------------
LF664:  sta     $ED            ; F664 85 ED                                     ..
        sta     $EE            ; F666 85 EE                                     ..
RETURN: rts                    ; F668 60                                        `

$ED/$EE = bit horiz coord hi/low?



; ----------------------------
LF6A5:  lda     #$0D          
        jsr     LF6AC         
        lda     #$0A          
LF6AC:  bit     $1640        $1640 input buffer? control key?
LF6AF:  bvc     LF6B4        bit 6 clear .X...... (not an ASCII letter) 
        jmp     (L1608)       

; ----------------------------
LF6B4:  stx     $BF49         temp X stor
        sty     $BF4A         temp Y stor
        and     #$7F          get bits 0-6 .XXXXXXX
        sec                   
        sbc     #$20          subtract 32
        bcc     ASCII CR		less than 32 == control char
        sta     $F7           
        jsr     LF8EB         
        lda     $F7           
        sta     $F1           
        ldy     #$F0          
        asl     a             
        asl     a             
        bcc     LF6D2         
        iny                   
        clc                   
LF6D2:  adc     $F1           
        sta     $F1           
        bcc     LF6D9         
        iny                   
LF6D9:  sty     $F2           
        ldy     #$00          
        sty     $FA           
        lda     ($F1),y       
        sta     $F4           
        bmi     LF6F1         
        sty     $F5           
        sty     $F6           
        jsr     LF715         
        jsr     LF715         
        sty     $FA           
LF6F1:  jsr     ?F749         
        jsr     LF715         
        lda     $FA           
        cmp     #$07          
        bmi     LF6F1         
        bit     $F4           
        bpl     LF70B         
        sty     $F5           
        sty     $F6           
        jsr     LF715         
        jsr     LF715         
LF70B:  jsr     DO TAB        
        ldy     $BF4A         
        ldx     $BF49         
        rts                   




        ldx     #$DF           ; FBDB A2 DF    
        jsr     LFB94          ; FBDD 20 94 FB 	returns with DD added to DF, DE added to E0
...
; ---------------------------------------------
LFB94:  clc                    ; FB94 18       	clear carry
        lda     $00,x          ; FB95 B5 00    load accumulator from $DF
        adc     $DD            ; FB97 65 DD    add $DD to $DF
        sta     $DD            ; FB99 85 DD    store at $DD
        lda     $01,x          ; FB9B B5 01    load accumulator from $E0
        adc     $DE            ; FB9D 65 DE    add $DE to $E0
        sta     $DE            ; FB9F 85 DE    store at $DE
        rts                    ; FBA1 60       return




        ldx     #$DD           ; F2B0 A2 DD    
        jsr     LF3E1          ; F2B2 20 E1 F3 	returns with $E9 populated with top 4 bits of $DE, $EA with lower 4; $EB,$EC with hi/lo 4 bits of $DD; Y=4
...
LF3E1:  ldy     #$00           ; F3E1 A0 00    	Y = 0
        lda     $01,x          ; F3E3 B5 01    	load accumulator from $DE
        jsr     LF3EA          ; F3E5 20 EA F3 	returns: Y=2
        lda     $00,x          ; F3E8 B5 00    	load accumulator from $DD
		LF3EA:  pha                    ; F3EA 48       	push accumulator to stack ($DE,$DD)
				lsr     a              ; F3EB 4A       	divide by 2		.XXXXXXX
				lsr     a              ; F3EC 4A       	... 4			..XXXXXX
				lsr     a              ; F3ED 4A       	... 8			...XXXXX
				lsr     a              ; F3EE 4A       	... 16			....XXXX
				jsr     LF3F3          ; F3EF 20 F3 F3 	
				pla                    ; F3F2 68       	pull accumulator from stack ($DE,$DD)
				LF3F3:  and     #$0F           ; F3F3 29 0F    	AND with bit 0-3	....XXXX
						clc                    ; F3F5 18       	clear carry			
						adc     #$30           ; F3F6 69 30    	add #$30 (48)		0011XXXX
						cmp     #$3A           ; F3F8 C9 3A    	compare to #$3A (58)	00111010
						bmi     LF3FE          ; F3FA 30 02    	if less than #$3A
						adc     #$06           ; F3FC 69 06    	add #$06	00000110
				LF3FE:  sta     (T3LB),y       ; F3FE 91 E9    	PASS 1 store (#$36-#$3A) at low byte of table 3 $E9; PASS 2: $EA; $EB; $EC
						iny                    ; F400 C8       	PASS 1: Y=1; PASS 2: Y=2; Y=3;
						rts                    ; F401 60       	PASS 1,3 return-> F3F2; PASS 2: return->F3E8; PASS 4: return->F2B2


Lots of one-off routines centered around $DF

        ldx     #$DF           ; F239 A2 DF    	
        jsr     LFBB0          ; F23B 20 B0 FB 	
	
	
; ---------------------------------------------	
LFBB0:  lda     $DE            ; FBB0 A5 DE    	load A from $DE
        sta     $01,x          ; FBB2 95 01    	store at $DF+1 $E0
        lda     $DD            ; FBB4 A5 DD    	load A from DD
        sta     $00,x          ; FBB6 95 00    	store at $DF+0 $DF
        rts                    ; FBB8 60       	returns with $DE->$E0, $DD->$DF 
	
	
	
        ldx     #$E3           ; FBD6 A2 E3    	
        jsr     LFBB9          ; FBD8 20 B9 FB 	
	
; ---------------------------------------------	
LFBB9:  lda     $01,x          ; FBB9 B5 01    	load A from $E3+1 $E4
        sta     $DE            ; FBBB 85 DE    	store at $DE
        lda     $00,x          ; FBBD B5 00    	load A from $E3
        sta     $DD            ; FBBF 85 DD    	store at $DD
        rts                    ; FBC1 60       	returns with $E4->DE, $E3->$DD

; ----------------------------------------------------------------------------

	
        ldx     #$DF           ; FBDB A2 DF    
        jsr     LFB94          ; FBDD 20 94 FB 
	
	
LFB94:  clc                    ; FB94 18    	clear carry
        lda     $00,x          ; FB95 B5 00 	load A from $DF
        adc     $DD            ; FB97 65 DD 	add $DF to $DD
        sta     $DD            ; FB99 85 DD 	store at $DD
        lda     $01,x          ; FB9B B5 01 	load A from E0
        adc     $DE            ; FB9D 65 DE 	add $E0 to $DE
        sta     $DE            ; FB9F 85 DE 	store at $DE
        rts                    ; FBA1 60    	returns with $DF+$DD, $E0+$DE


TAB:    cmp     #$09           ; F62B C9 09    	if TAB
        bne     FFEED          ; F62D D0 6B    	else, check for form feed
DO TAB: bit     $1639          ; F62F 2C 39 16 	if shift key? control key? mode?
        bmi     LF63C          ; F632 30 08    	
        clc                    ; F634 18       	otherwise... clear carry
        lda     $EB            ; F635 A5 EB    	load A from horiz char position
        adc     #$06           ; F637 69 06    	add 6 to horiz char
        sta     $EB            ; F639 85 EB    	store new horiz char
        rts                    ; F63B 60       	return


LF63C:  lda     $ED            ; F63C A5 ED		load A from horiz byte
        clc                    ; F63E 18   		clear carry
        adc     #$06           ; F63F 69 06		add 6 to horiz byte
        sta     $ED            ; F641 85 ED		set horiz byte
        bcc     LF647          ; F643 90 02		
        inc     $EE            ; F645 E6 EE		if overflowed, increment horiz byte hi
LF647:  sec                    ; F647 38   		set carry
        sbc     #$3B           ; F648 E9 3B		subtract 60 from A (horiz byte) if A<60, carry bit clear
        lda     $EE            ; F64A A5 EE		load A from horiz byte hi
        sbc     #$01           ; F64C E9 01		decrement by 1 if A>60, by 2 if A<60
        bcc     RETURN2        ; F64E 90 03		return on carry clear (A rolled over 0)
        jmp     DO CANCEL      ; F650 4C BD F5 	




write buncha zeroes to the Visable Memory

$2000


 A9 00       LDA   #$00
 A8          TAY
 99 00 60    STA   $6000,Y
 C8          INY
 D0 FA       BNE   $2003
 EE 05 20    INC   $2005
 D0 F5       BNE   $2003
 60          RTS




MODIFIED ROM ERRATA:

$FBD4:
should this jump to FC15 or FC17 instead of FC16? FC15 is a BPL. FC17 is RST

changing
        bcc     LFC16          ; FBD4 90 40 
to 
        bcc     LFC17          ; FBD4 90 41 





T2 = pointer to input buffer?
LF3A8 increments through buffer, looks for commands, spaces?


CMP sets flags as if a subtraction had been carried out. 
If the value in A/X/Y is equal or greater than the compared value, the Carry will be set. 
The equal (Z) and negative (N) flags will be set based on equality or lack thereof and the sign (i.e. A>=$80) of the result.

Result		N	Z	C
A < Memory	1	0	0
A = Memory	0	1	1
A > Memory	0	0	1
The N flag will be bit 7 of A - Memory


BIT: The S and V flags are set to match bits 7 and 6 respectively in the value stored at the tested address.
BMI: branch minus - if S flag (Sign flag, or N flag in some docs) is 1. 
BVS: branch on oVerflow Set, if V flag is 1

if bit 7 is 1, BIT->BMI
if bit 7 is 0, BIT->BPL
if bit 6 is 1, BIT->BVS
if bit 6 is 0, BIT->BVC





UNO:  jsr     DOS          ; F3B8 20 BB F3                        
DOS:  jsr     TRE          ; F3BB 20 BE F3                        
TRE:  asl     progStartLo,x  ; F3BE 16 00                         
        rol     progStartHi,x  ; F3C0 36 01                       
        bcc     RTS3           ; F3C2 90 03                       
        jmp     (JUMP TABLE+$0E); F3C4 6C 0E 16                   
RTS3:   rts                    ; F3C7 60                          
		



